# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kFC245LT8fV7nCLDAPUwEovylCUJOdFY
"""

import pandas as pd
import numpy as np
df = pd.read_csv("ds_salaries.csv")

df.head(4)

df.describe()

df.info()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(data=df, x='work_year')
plt.title('Distribusi Work Year')
plt.show()

df.duplicated().sum()

df.isnull().sum()

# Deteksi outlier pada kolom target 'salary_in_usd'
Q1 = df['salary_in_usd'].quantile(0.25)
Q3 = df['salary_in_usd'].quantile(0.75)
IQR = Q3 - Q1

batas_bawah = Q1 - 1.5 * IQR
batas_atas = Q3 + 1.5 * IQR

# Tandai outlier
df['outlier_flag'] = ((df['salary_in_usd'] < batas_bawah) | (df['salary_in_usd'] > batas_atas))

# Cek berapa banyak
print("Jumlah outlier:", df['outlier_flag'].sum())

# (Opsional) Buat DataFrame tanpa outlier
df_bersih = df[~df['outlier_flag']]

A = df_bersih[['work_year']]
o = df_bersih['salary_in_usd']

A_train, A_test, o_train, o_test = train_test_split(A, o, test_size=0.2, random_state=42)

print(A_train.shape)
print(A_test.shape)
print(o_train.shape)
print(o_test.shape)

linregg = LinearRegression()
linregg.fit(A_train, o_train)

o_pred = linregg.predict(A_test)

interc = linregg.intercept_
coeff = linregg.coef_

print("Intercept:", interc)
print("Coefficient:", coeff)

A_train_cons = sm.add_constant(A_train)
ols_mod = sm.OLS(o_train, A_train_cons)
results = ols_mod.fit()

print(results.summary())



X = df[['work_year']]
y = df['salary_in_usd']

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.linear_model import LinearRegression

linreg = LinearRegression()
linreg.fit(X_train, y_train)

y_pred = linreg.predict(X_test)

import matplotlib.pyplot as plt

inter = linreg.intercept_
coef = linreg.coef_

print("Intercept:", inter)
print("Coefficient:", coef)

msq = mean_squared_error(o_test, o_pred)
print("Mean squared error: ", msq)

R2 = r2_score(o_test, o_pred)
print("R-squared: ", R2)

plt.figure(figsize=(7, 4))
sns.boxplot(x=df_bersih['salary_in_usd'], color='skyblue')
plt.title("Boxplot Gaji (salary_in_usd)")
plt.xlabel("Salary (USD)")
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(A_test, o_test, color='skyblue', label='Actual Salaries', alpha=0.6)

plt.plot(A_test, o_pred, color='red', linewidth=2, label='Regression Line')
plt.title('Salary Trend over Work Year')
plt.xlabel('Work Year')
plt.ylabel('Salary in USD')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

from sklearn.metrics import mean_squared_error, r2_score
import statsmodels.api as sm

X_train_cons = sm.add_constant(X_train)
ols_mod = sm.OLS(y_train, X_train_cons)
result = ols_mod.fit()

print(result.summary())

mse = mean_squared_error(y_test, y_pred)
print("Mean squared error: ", mse)

r2 = r2_score(y_test, y_pred)
print("R-squared: ", r2)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(7, 4))
sns.boxplot(x=df['salary_in_usd'], color='skyblue')
plt.title("Boxplot Gaji (salary_in_usd)")
plt.xlabel("Salary (USD)")
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='skyblue', label='Actual Salaries', alpha=0.6)

plt.plot(X_test, y_pred, color='red', linewidth=2, label='Regression Line')
plt.title('Salary Trend over Work Year')
plt.xlabel('Work Year')
plt.ylabel('Salary in USD')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

X = df[['work_year', 'salary_in_usd']]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X_scaled)

# Tambahkan hasil klaster ke DataFrame
df['cluster'] = kmeans.labels_

# Lihat hasil awal
print(df[['work_year', 'salary_in_usd', 'cluster']].head())

# Visualisasi dengan warna sesuai klaster
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='work_year', y='salary_in_usd', hue='cluster', palette='viridis')
plt.title("K-Means Clustering: Work Year vs Salary")
plt.xlabel("Work Year")
plt.ylabel("Salary (USD)")
plt.legend(title='Cluster')
plt.grid(True)
plt.show()

# Coba nilai k dari 1 sampai 15
inertia = []
K = range(1, 15)

for k in K:
    km = KMeans(n_clusters=k, random_state=42)
    km.fit(X_scaled)
    inertia.append(km.inertia_)

# Plot elbow graph
plt.figure(figsize=(8, 4))
plt.plot(K, inertia, 'bo-')
plt.xlabel('Jumlah Klaster (k)')
plt.ylabel('Inertia')
plt.title('Metode Elbow untuk Menentukan k')
plt.grid(True)
plt.show()

cluster_counts = df['cluster'].value_counts().sort_index()
for cluster_id, count in cluster_counts.items():
    print(f"Klaster {cluster_id}: {count} data")

from sklearn.metrics import silhouette_score

score = silhouette_score(X_scaled, kmeans.labels_)
print(f"Silhouette Score: {score}")

for k in range(2, 6):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    score = silhouette_score(X_scaled, kmeans.labels_)
    print(f"k = {k}, Silhouette Score = {score}")

df['cluster'] = df['cluster'] + 3
cluster_counts = df['cluster'].value_counts().sort_index()
for cluster_id, count in cluster_counts.items():
    print(f"Klaster {cluster_id}: {count} data")

skor = silhouette_score(X_scaled, kmeans.labels_)
print(f"Silhouette Score: {skor}")

from sklearn.decomposition import PCA
import seaborn as sns

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

df_pca = pd.DataFrame(data=X_pca, columns=['PC1', 'PC2'])
df_pca['cluster'] = kmeans.labels_

plt.figure(figsize=(10, 6))
sns.scatterplot(data=df_pca, x='PC1', y='PC2', hue='cluster', palette='viridis')

"""Kesimpulan dari hasil clustering dataset ini adalah bahwasannya skor untuk kluster 0,1,2 masih terbilang aman dan ketimpangan nilai dari masing-masing cluster masih terbilang baik, tapi ada bagusnya untuk skor yang lebih maksimal bisa menggunakan cluster lainnya seperti 2,3,4 atau 3,4,5."""

# --- Fungsi untuk menghitung Kenaikan Gaji Year-on-Year (YoY) --- 
def calculate_yoy_increase_linear(model, current_year, previous_year):
    """
    Menghitung persentase kenaikan gaji YoY menggunakan model linear regression sederhana.
    Model ini diasumsikan hanya menggunakan 'work_year' sebagai fitur.
    """
    # Prediksi untuk tahun ini
    salary_current_year = model.predict(pd.DataFrame({'work_year': [current_year]}))[0]
    
    # Prediksi untuk tahun sebelumnya
    salary_previous_year = model.predict(pd.DataFrame({'work_year': [previous_year]}))[0]
    
    if salary_previous_year > 0:
        yoy_increase = ((salary_current_year - salary_previous_year) / salary_previous_year) * 100
        return yoy_increase, salary_current_year, salary_previous_year
    else:
        return None, salary_current_year, salary_previous_year # Tidak bisa menghitung YoY jika gaji tahun lalu 0 atau negatif

# Contoh penggunaan fungsi YoY dengan model linreg yang sudah dilatih:
# Pastikan model 'linreg' sudah dilatih sebelumnya dalam script ini.
# Misalnya, kita ingin melihat YoY dari 2021 ke 2022

# Menggunakan model 'linreg' yang dilatih pada X (hanya 'work_year') dan y ('salary_in_usd') dari data asli (df)
# Jika Anda ingin menggunakan model 'linregg' yang dilatih pada df_bersih, ganti 'linreg' dengan 'linregg'.
# Pastikan model linreg sudah terdefinisi dan terlatih.
# Misalnya, jika linreg dilatih seperti ini:
# X_simple = df[['work_year']]
# y_simple = df['salary_in_usd']
# X_train_simple, X_test_simple, y_train_simple, y_test_simple = train_test_split(X_simple, y_simple, test_size=0.2, random_state=42)
# linreg = LinearRegression()
# linreg.fit(X_train_simple, y_train_simple)

# Cek apakah linreg ada dan sudah di-fit. Untuk keamanan, kita bisa coba fit ulang jika belum ada
if 'linreg' not in locals() or not hasattr(linreg, 'coef_'):
    print("\nModel 'linreg' tidak ditemukan atau belum dilatih. Melatih model sederhana...")
    X_for_yoy = df[['work_year']]
    y_for_yoy = df['salary_in_usd']
    # Hapus NaN jika ada untuk pelatihan model yang lebih stabil
    temp_df_for_yoy = pd.DataFrame({'work_year': X_for_yoy['work_year'], 'salary_in_usd': y_for_yoy})
    temp_df_for_yoy.dropna(subset=['work_year', 'salary_in_usd'], inplace=True)
    
    if not temp_df_for_yoy.empty:
        X_fit_yoy = temp_df_for_yoy[['work_year']]
        y_fit_yoy = temp_df_for_yoy['salary_in_usd']
        linreg = LinearRegression()
        linreg.fit(X_fit_yoy, y_fit_yoy)
        print("Model 'linreg' dilatih.")
    else:
        print("Tidak cukup data untuk melatih model 'linreg'.")
        linreg = None # Set ke None jika tidak bisa dilatih

if linreg and hasattr(linreg, 'coef_'): # Pastikan linreg ada dan sudah di-fit
    example_current_year = 2022
    example_previous_year = 2021
    min_year_in_data = df['work_year'].min()

    if example_previous_year >= min_year_in_data:
        yoy_percentage, pred_current, pred_previous = calculate_yoy_increase_linear(linreg, example_current_year, example_previous_year)
        print(f"\n--- Contoh Perhitungan YoY untuk Model Linear Sederhana ({example_previous_year} ke {example_current_year}) ---")
        print(f"Prediksi Gaji Tahun {example_previous_year}: USD {pred_previous:,.2f}")
        print(f"Prediksi Gaji Tahun {example_current_year}: USD {pred_current:,.2f}")
        if yoy_percentage is not None:
            print(f"Persentase Kenaikan Gaji YoY: {yoy_percentage:.2f}%")
        else:
            print("Tidak dapat menghitung YoY karena gaji tahun sebelumnya adalah nol atau negatif.")
    else:
        print(f"\nTidak dapat menghitung YoY untuk {example_previous_year} karena data paling awal adalah {min_year_in_data}.")
else:
    print("\nTidak dapat menjalankan contoh YoY karena model 'linreg' tidak tersedia/terlatih.")